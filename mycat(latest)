#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

typedef struct inodemake{
	unsigned int ftype; // ftype = 0 is normal file, ftype = 1 is directory file ��������
	int inodenum; // inode �ѹ�
	int ftime[6]; // ���� �ð�
	int fsize; // ���� ũ��
	int datablocknum; // �����ͺ��� ����
}inodemake;

typedef struct datablockmake{
	char data[128]; // 128����Ʈ ����
	int datablocknum; // �����ͺ��� �ѹ�
}datablockmake;

typedef struct filename{
	char name[5];//�����̸�
	int inodeconnect;//���̳����ѹ��� ���� �Ⱦ��ִ� ����
}filename;
//�����丮 ���� �����Ϳ� �� ������ ���� ����

typedef struct superblockmake{
	unsigned int inodeuse[16];
	unsigned int datause[32];
}superblockmake;
superblockmake superblock;

int findnowdir();
int super_i_up();
int super_d_up();
void super_i_down(int);
void super_d_down(int);
void mycat(void);
void mycp(void);
void myrmdir(void);

int main(void){
	time_t t;
	struct tm *pt;
	FILE *ifp;
	int myfscheck = 0;//myfsȮ�ο�
	int *check;
	int i, k, m, j, x = 0, h, n = 0, read;
	char typ[1000];// ���� �Է¿�
	char where[100];
	short int bootblock = 0;
	datablockmake datablock[1024];// �����ͺ��� 1024�� ����
	inodemake inode[512]; // ���̳��� 512�� ����
	filename file[512];
// ���̳��� �ѹ� �ο� �� �ʱ�ȭ
	for(i = 0; i < 512 ; i++){
		inode[i].inodenum = i + 1;
		inode[i].ftype = 0;
		inode[i].fsize = 0;
		inode[i].datablocknum = 0;
	} 
// �����ͺ��� �ѹ� �ο��� �ʱ�ȭ
	for(k = 0; k < 1024; k++){
		datablock[k].datablocknum = k + 1; // �����ͺ��� �ѹ� �ο�
	}
    // ��Ʈ ���� ������ ����
	strcpy(file[0].name , "/");
	file[0].inodeconnect = 1;
	inode[0].ftype = 1;
	inode[0].datablocknum = 1;
	strcpy(where, file[0].name);
	// ��Ʈ Ʈ�� ����
//����
		while(1){

			if(access("myfs", F_OK) == -1){ 
				printf("error : no myfs\n");
				while(x != 1){
					printf("$");
					scanf("%[^\n]", &typ);
					getchar();
					if(!strncmp(typ,"mymkfs",6)){
						ifp = fopen("myfs", "wb");
						fclose(ifp);
					}
					else if(!strncmp(typ,"myfs_shell", 10)){
						if(access("myfs", F_OK) == 0)
						x = 1;
						else
							printf("error : no myfs\n");
					}
					else
						printf("command error\n");
			}
		}

			printf("[%s ]$", where); //������Ʈ�̸�
			scanf("%[^\n]", &typ);//���鵵 �Է¹ޱ� ���Ͽ�
			getchar();
//command ����			
  			if(strncmp(typ, "my", 2)){
					system(typ);
					}
//mymkfs ����	
			if(!strncmp(typ,"mymkfs",6)){
					printf("error : nyfs exists!\n");//Ȯ�ο�
                  }
//myls ����
			if(!strncmp(typ,"myls", 4)){

				int e, i = 0, n = 0;
				char findname[5];
				char name[20][5];
				char tmp[5];
				// �̰� �ؾ���.. ���� �����͸� �����ͳѹ� ã��
				e = findnowdir(where);
					if(e == 1){
						h = 0;
					}
					else{
						strncpy(findname, &where[e-4], 4); 
						//findname�̶� file[i].name �����ؼ� ������ ã�� �� i�� ������ ���� ����
						while(strcmp(findname, file[i].name)){
							i++;
						}
						h = inode[i].datablocknum - 1;
					}

			
			//	h = nowdatanumber find;

				for(i = 0; datablock[h].data[i] != '\0'; i++){

					for( k = 0; k < 4; k++)
						name[n][k] = datablock[h].data[i+k];

					name[n][5] = '\0';
					i += 4;
					n++;
				}

				//name[n] �� ����
				for(i=0; i < n-1; i++){

					for(j=0; j<n-1-i;j++){

						if(strcmp(name[j], name[j+1]) > 0){
							strcpy(tmp, name[j]);
							strcpy(name[j], name[j+1]);
							strcpy(name[j+1], tmp);
						}
					}
				}

				for(i = 0; i < n; i++)

					printf("%s ", name[i]);

				printf("\n");
			}
//mycat ����
			if(!strncmp(typ,"mycat", 5)){
			}
//myshowfile ����
			if(!strncmp(typ,"myshowfile", 10)){
			}
//mypwd ����
			if(!strncmp(typ,"mypwd", 5)){
			}
//mycd ����
			if(!strncmp(typ,"mycd", 4)){
			}
//mycp ����
			if(!strncmp(typ,"mycp", 4)){
			}
//mycpto ����
			if(!strncmp(typ,"mycpto", 6)){
			}
//mycpfrom ����
			if(!strncmp(typ,"mycpfrom", 8)){
			}
//mymkdir ����
			if(!strncmp(typ,"mymkdir",7)){
				int n, k;
				printf("!\n");//Ȯ��
				// ���ۺ������� �� ���̳��� ã�� file[n]�� �ο�
				for(i = 0; i < 4; i++){
					file[n].name[i] = typ[i+8];//�����̸� �ֱ�
				}
				printf("%s\n", file[n].name);
				file[n].inodeconnect = n+1; // ���ۺ��� ���� �����ϴ� ������ ����
				inode[n].ftype = 1;//�����丮 ����
				t = time(NULL);
				pt=localtime(&t);
				inode[n].ftime[0] = pt->tm_year+1900;
				inode[n].ftime[1] = pt->tm_mon+1;
				inode[n].ftime[2] = pt->tm_mday;
				inode[n].ftime[3] = pt->tm_hour;
				inode[n].ftime[4] = pt->tm_min;
				inode[n].ftime[5] = pt->tm_sec;
				//���ۺ������� �� �����ͺ��� ã�� inode[n].datablocknum �ο�= k
				inode[n].datablocknum = k;
				
			}
//myrmdir ����
			if(!strncmp(typ,"myrmdir", 7)){
			}
//mymv ����
			if(!strncmp(typ,"mymv", 4)){
			}
//mytouch ����
			if(!strncmp(typ,"mytouch", 7)){
			}
//myshowinode ����
			if(!strncmp(typ,"myshowinode", 11)){
			}
//myshowblock ����
			if(!strncmp(typ,"myshowblock", 11)){
			}
//mystate ����
			if(!strncmp(typ,"mystate", 7)){
			}
//mytree ����
			if(!strncmp(typ,"mytree", 6)){
			}
		}
		return 0;
}
	 
int findnowdir(char a[]){
	int i = 0;
		while(a[i] != '\0'){
			i++;
		}

		return i;
}

//super_i_up ������ ������ ���� ���̳��彴�ۺ��� 1�� ���� �� ���̳��� �ѹ� num���� ����;
int super_i_up(){
	int num, r, i, t, v = 0, k = 1, s;
	unsigned int comp;
	unsigned int to;
	to = 1;
	to = to << 31;
	while(k){
		t = 1;
		s = 0;
	comp = superblock.inodeuse[v]; 
	while((comp & to) == to){
		comp = comp << 1;
		s++;
		if((s % 32) == 0){
			printf("R");
			v++;
			comp = superblock.inodeuse[v];
		}
		printf("O");
	}
	if((comp & to) == 0){ 
		comp = to;
		comp = comp >> s;
		superblock.inodeuse[v] += comp;
		k = 0;
	}
	if(v == 16)
		k = 0;
	printf("X");
	num = v*32 + (s % 32) + 1;
	}
	printf("num: %d\n", num);
	printf("\n");
	return num;
}
//super_d_up ������ ������ ���� �����ͺ��ϳѹ����ۺ��� 1�� ������ �����ͺ��� �ѹ� num���� ����;
int super_d_up(){
	int num, r, i, t, v = 0, k = 1, s;
	unsigned int comp;
	unsigned int to;
	to = 1;
	to = to << 31;
	while(k){
		t = 1;
		s = 0;
	comp = superblock.datause[v]; 
	while((comp & to) == to){
		comp = comp << 1;
		s++;
		if((s % 32) == 0){
			printf("R");
			v++;
			comp = superblock.datause[v];
		}
		printf("O");
	}
	if((comp & to) == 0){ 
		comp = to;
		comp = comp >> s;
		superblock.datause[v] += comp;
		k = 0;
	}
	if(v == 32)
		k = 0;
	printf("X");
	num = v*32 + (s % 32) + 1;
	}
	printf("num: %d\n", num);
	printf("\n");
	return num;
}
void super_i_down(int i){
	int m, n;
	unsigned int to;
	to = 1;
	to = to << 31;
	m = i / 32;
	n = i % 32;
	to = to >> n - 1;

	superblock.inodeuse[m] -= to;
}
	
void super_d_down(int i){
	int m, n;
	unsigned int to;
	to = 1;
	to = to << 31;
	m = i / 32;
	n = i % 32;
	to = to >> n - 1;

	superblock.datause[m] -= to;
}

/*
void mycp(void){
	char buf_1[4], buf_2[4];
	int i=6, j=0;
	for(i; i<10; i++){
		buf_1[j] = typ[i];
		j++;
	}
	while(typ[i] = '\0')
		i++;
	j=0;
	i++;
	int k = i+4;
	for(i; i<k; i++){
		buf_2[j] = typ[i];
		j++;
	}
	int a=0, b=0;
	while((strncmp(buf_1, file[a],name,4)) == 0)
		a++;
}

void myrmdir(void){
	char buf_1[4];
	int i=9, j=0;
	for(i; i<13; i++){
		buf[j] = typ[i];
		j++;
	}
	i=0;
	while((strncmp(buf,file[i].name, 4)) == 0)
		i++;
}
*/
void mycat(void){
	int d_check = 0, red = 0;
	int i, j = 0;
	char buf_1[4], buf_2[4], buf_3[4];
	int i_1i = 0, i_2 = 0, i_3 = 0;
	int a=0, b=0, c=0;

	while(1){
		if(typ[d_check] == '>'){ // '>'� ��� ��
			red = 1;
			break;
		}
		d_check++;
	
	}
	i=7;
	if(d_check > 0){
		for(i; i<d_check; i++){
			if(typ[i] == '\0')
				red++;
		}
	}

	if (red == 0){
		if(typ[8] == '\0' || typ[9] == '\0' || typ[10] == '\0')
			printf("error : enter more letters (4)");
		else if(typ[11] != '\0')
			printf("error : too many letters");
		else{
			j=0
			for(i=7; i<11; i++){
				buf_1[j] = typ[i];
				j++;
			}
			while((strncmp(buf_1,file[a].name, 4)) == 0)
				a++;
			printf("%s",datablock[a].data );
		}
	}

	if (red == 1){
		if(typ[8] == '\0' || typ[9] == '\0' || typ[10] == '\0')
			printf("error : enter more letters (4)");
		else if(typ[11] != '\0')
			printf("error : too many letters");
		else if(typ[15] == '\0', typ[16] == '\0', typ[17] == '\0')
			printf("error : enter more letters (4)");
		else if(typ[18] != '\0')
			printf("error : too many letters");
		else{
			j=0;
			for(i=7; i<11; i++){
				buf_1[j] = typ[i];
				j++;
			}
			j=0;
			for(i=14; i<18; i++){
				buf_2[j] = typ[i];
				j++;
			}
			while((strncmp(buf_1,file[a].name,4)) == 0)
				a++;
			while((strncmp(buf_2,file[b].name,4)) == 0)
				b++;
			strcat(datablock[b].data, datablock[a].data);
		}
	}

	if (red == 2){
		if(typ[8] == '\0' || typ[9] == '\0' || typ[10] == '\0')
			printf("error : enter more letters (4)");
		else if(typ[11] != '\0')
			printf("error : too many letters");
		else if(typ[13] == '\0', typ[14] == '\0', typ[15] == '\0')
			printf("error : enter more letters (4)");
		else if(typ[16] != '\0')
			printf("error : too many letters");
		else if(typ[20] == '\0' || typ[21] == '\0' || typ[22] == '\0')
			printf("error : enter more letters (4)");
		else if(typ[23] != '\0')
			printf("error : too many letters");
		else{
			i=7;
			j=0;
			for(i; i<11; i++){
				buf_1[j] = typ[i];
				j++;
			}
			j=0;
			for(i=12; i<16; i++){
				buf_2[j] = typ[j];
				j++;
			}
			for(i=19; i<23; i++){
				buf_3[j] = typ[j];
				j++;
			}
			while((strncmp(buf_1, file[a].name,4)) == 0)
				a++;
			while((strncmp(buf_2, file[b].name,4)) == 0)
				b++;
			while((strncmp(buf_3, file[c].name,4)) == 0)
				c++;
			char buf[512];
			strcat(datablock[c].data, datablock[a].data);
			strcat(datablock[c].data, datablock[b].data);
				
		}
	}
}

